// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: order_product.sql

package db

import (
	"context"
)

const createOrderProduct = `-- name: CreateOrderProduct :one
INSERT INTO "OrderProduct" (
	"OrderUuid",
    "ProductUuid") 
VALUES (
    $1,
    $2
)
RETURNING "OrderUuid", "ProductUuid"
`

type CreateOrderProductParams struct {
	OrderUuid   int64 `json:"OrderUuid"`
	ProductUuid int64 `json:"ProductUuid"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, createOrderProduct, arg.OrderUuid, arg.ProductUuid)
	var i OrderProduct
	err := row.Scan(&i.OrderUuid, &i.ProductUuid)
	return i, err
}

const getOrderProduct = `-- name: GetOrderProduct :one
SELECT "OrderUuid", "ProductUuid" FROM "OrderProduct"
WHERE "OrderUuid" = $1 
    AND "ProductUuid" = $2 
LIMIT 1
`

type GetOrderProductParams struct {
	OrderUuid   int64 `json:"OrderUuid"`
	ProductUuid int64 `json:"ProductUuid"`
}

func (q *Queries) GetOrderProduct(ctx context.Context, arg GetOrderProductParams) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, getOrderProduct, arg.OrderUuid, arg.ProductUuid)
	var i OrderProduct
	err := row.Scan(&i.OrderUuid, &i.ProductUuid)
	return i, err
}

const listOrderProducts = `-- name: ListOrderProducts :many
SELECT "OrderUuid", "ProductUuid" FROM "OrderProduct"
ORDER BY "OrderUuid"
LIMIT $1
OFFSET $2
`

type ListOrderProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderProducts(ctx context.Context, arg ListOrderProductsParams) ([]OrderProduct, error) {
	rows, err := q.db.QueryContext(ctx, listOrderProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderProduct{}
	for rows.Next() {
		var i OrderProduct
		if err := rows.Scan(&i.OrderUuid, &i.ProductUuid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderProduct = `-- name: UpdateOrderProduct :one
UPDATE "OrderProduct"
  set "ProductUuid" = $3
WHERE "OrderUuid" = $1 
    AND "ProductUuid" = $2
RETURNING "OrderUuid", "ProductUuid"
`

type UpdateOrderProductParams struct {
	OrderUuid     int64 `json:"OrderUuid"`
	ProductUuid   int64 `json:"ProductUuid"`
	ProductUuid_2 int64 `json:"ProductUuid_2"`
}

func (q *Queries) UpdateOrderProduct(ctx context.Context, arg UpdateOrderProductParams) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, updateOrderProduct, arg.OrderUuid, arg.ProductUuid, arg.ProductUuid_2)
	var i OrderProduct
	err := row.Scan(&i.OrderUuid, &i.ProductUuid)
	return i, err
}
