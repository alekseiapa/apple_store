// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "Order" (
	"UserUuid",
  "Quantity") 
VALUES (
    $1, $2
)
RETURNING "Uuid", "UserUuid", "Quantity"
`

type CreateOrderParams struct {
	UserUuid int64 `json:"UserUuid"`
	Quantity int64 `json:"Quantity"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserUuid, arg.Quantity)
	var i Order
	err := row.Scan(&i.Uuid, &i.UserUuid, &i.Quantity)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :execrows
DELETE FROM "Order"
WHERE "Uuid" = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, uuid int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteOrder, uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getOrder = `-- name: GetOrder :one
SELECT "Uuid", "UserUuid", "Quantity" FROM "Order"
WHERE "Uuid" = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, uuid int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, uuid)
	var i Order
	err := row.Scan(&i.Uuid, &i.UserUuid, &i.Quantity)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT "Uuid", "UserUuid", "Quantity" FROM "Order"
ORDER BY "Uuid"
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.Uuid, &i.UserUuid, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE "Order"
  set "UserUuid" = $2,
      "Quantity" = $3
WHERE "Uuid" = $1
RETURNING "Uuid", "UserUuid", "Quantity"
`

type UpdateOrderParams struct {
	Uuid     int64 `json:"Uuid"`
	UserUuid int64 `json:"UserUuid"`
	Quantity int64 `json:"Quantity"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder, arg.Uuid, arg.UserUuid, arg.Quantity)
	var i Order
	err := row.Scan(&i.Uuid, &i.UserUuid, &i.Quantity)
	return i, err
}
